# -*- coding: utf-8; mode: makefile-gmake -*-

# You can set these variables from the command line.
SPHINXOPTS  ?=
SPHINXBUILD ?= $(PY_ENV_BIN)/sphinx-build
DOCS_BUILD  ?= build/docs
GH_PAGES    ?= gh-pages
DOCS_DIST   ?= dist/docs

ifeq ($(KBUILD_VERBOSE),1)
  SPHINX_VERBOSE = "-v"
else
  SPHINX_VERBOSE =
endif

## SPHINXVERS variable
## ===================
##
## .. _requirement-specifiers: https://pip.pypa.io/en/stable/reference/pip_install/#requirement-specifiers
##
## Sphinx version to use, when building documentation.  Set this when calling
## build target.  The default value is empty (install latest), to select a
## specific version use a requirement-specifiers_.  E.g. to build your target
## 'doc' with a select sphinx-doc_ version 1.7.9::
##
##     make SPHINXVERS='==1.7.9' docs
##
## To build with latest 1.7::
##
##     make SPHINXVERS='>=1.7,<1.8' docs
##
SPHINXVERS  ?=

docs-help:
	@echo  'makefile.docs:'
	@echo  '  docs-clean	- clean intermediate doc objects'
	@echo  '  $(GH_PAGES)	- create & upload github pages'
        @echo  '  sphinx-pdf    - run sphinx latex & pdf targets'

# ------------------------------------------------------------------------------
# requirements
# ------------------------------------------------------------------------------

sphinx-doc: $(PY_ENV)
	@echo "  PY_ENV    installing Sphinx$(SPHINXVERS)"
	$(Q)$(PY_ENV_BIN)/pip install $(PIP_VERBOSE) 'Sphinx$(SPHINXVERS)'

sphinx-live: $(PY_ENV)
	@echo "  PY_ENV    installing Sphinx$(SPHINXVERS)"
	$(Q)$(PY_ENV_BIN)/pip install $(PIP_VERBOSE) 'Sphinx$(SPHINXVERS)' sphinx-autobuild


PHONY += msg-texlive texlive

ifeq ($(shell which xelatex >/dev/null 2>&1; echo $$?), 1)
texlive: msg-TeXLive
	$(error The 'xelatex' command was not found)
else
texlive:
	@:
endif

msg-texlive:
	$(Q)echo "\n\
The TeX/PDF output and the *math* extension require TexLive and latexmk:\n\n\
  Make sure you have a updated TeXLive with XeTeX engine installed, grab it\n\
  it from https://www.tug.org/texlive or install it from your package manager.\n\n\
  Install latexmk from your package manager or visit https://ctan.org/pkg/latexmk\n\n\
  Sphinx-doc produce (Xe)LaTeX files which might use additional TeX-packages\n\
  and fonts. To process these LaTeX files, a TexLive installation with the\n\
  additional packages is required. On debian based OS these requirements\n\
  are installed by::\n\n\
    sudo apt-get install\n\
         latexmk\n\
         texlive-base texlive-xetex texlive-latex-recommended\n\
         texlive-extra-utils dvipng ttf-dejavu\n"

# ------------------------------------------------------------------------------
# commands
# ------------------------------------------------------------------------------

# $2 sphinx builder e.g. "html"
# $3 path where configuration file (conf.py) is located
# $4 sourcedir
# $5 dest subfolder e.g. "man" for man pages at $(DOCS_DIST)/man

quiet_cmd_sphinx = SPHINX  $@ --> file://$(abspath $(DOCS_DIST)/$5)
      cmd_sphinx = $(SPHINXBUILD) $(SPHINX_VERBOSE) $(SPHINXOPTS)\
	-b $2 -c $3 -d $(DOCS_BUILD)/.doctrees $4 $(DOCS_DIST)/$5

quiet_cmd_sphinx_autobuild = SPHINX  $@ --> file://$(abspath $(DOCS_DIST)/$5)
      cmd_sphinx_autobuild = PATH="$(PY_ENV_BIN):$(PATH)" $(PY_ENV_BIN)/sphinx-autobuild  $(SPHINX_VERBOSE) --poll -B $(SPHINXOPTS)\
	-b $2 -c $3 -d $(DOCS_BUILD)/.doctrees $4 $(DOCS_DIST)/$5

quiet_cmd_sphinx_clean = CLEAN     $@
      cmd_sphinx_clean = rm -rf $(DOCS_BUILD) $(DOCS_DIST) $(GH_PAGES)/* $(GH_PAGES)/.buildinfo

# ------------------------------------------------------------------------------
# targets
# ------------------------------------------------------------------------------

PHONY += sphinx-latex
sphinx-latex: texlive sphinx-doc
	$(Q)mkdir -p $(DOCS_DIST)/latex
	$(call cmd,sphinx,latex,.,.,latex)

PHONY += sphinx-pdf
sphinx-pdf: sphinx-latex
	$(Q)cd $(DOCS_DIST)/latex; make all-pdf
	$(Q)mkdir -p $(DOCS_DIST)/pdf
	$(Q)cp $(DOCS_DIST)/latex/*.pdf $(DOCS_DIST)/pdf
	@echo " SPHINX  *.pdf --> file://$(abspath $(DOCS_DIST)/pdf)"

PHONY += docs-clean
docs-clean:
	$(call cmd,sphinx_clean)

PHONY += $(GH_PAGES)
$(GH_PAGES):
	$(MAKE) docs
	[ -d "gh-pages/.git" ] || git clone $(GIT_URL) gh-pages
	-cd $(GH_PAGES); git checkout --orphan gh-pages || exit 0
	rm -rf $(GH_PAGES)/* $(GH_PAGES)/.gitignore
	touch $(GH_PAGES)/.nojekyll ;\
	cp -r $(DOCS_DIST)/* $(GH_PAGES)/
	echo "<html><head><META http-equiv='refresh' content='0;URL=index.html'></head></html>" > $(GH_PAGES)/404.html
	-cd $(GH_PAGES); git push origin :gh-pages
	cd $(GH_PAGES);\
		git add --all . ;\
		git commit -m "gh-pages: updated" ;\
		git push origin gh-pages

.PHONY: $(PHONY)

