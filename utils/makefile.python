# -*- coding: utf-8; mode: makefile-gmake -*-

# list of python packages (folders) or modules (files) of this build
PYOBJECTS ?=

# folder where the python distribution takes place
PYDIST   ?= py_dist
# folder where the python intermediate build files take place
PYBUILD  ?= py_build
# python version to use
PY       ?=3
PYTHON   ?= python$(PY)
PIP      ?= pip$(PY)
PIP_INST ?= --user
PYLINT   ?= pylint

python-help::
	@echo  'makefile.python:'
	@echo  '  pylint        - run pylint *linting*'
	@echo  '  pytest	- run nose test on python objects'
	@echo  '  pybuild       - build python packages'
	@echo  '  pyclean       - clean intermediate python objects'
	@echo  '  py[un]install - [un]install python objects in editable mode'
	@echo  '  upload-pypi   - upload $(PYDIST)/* files to PyPi'
	@echo  ''
	@echo  '  make PY=2  [targets] => to eval targets with python 2 (default 3)'
	@echo  '  make PYLINT=pylint3  => to use pylint3 (default is standard pylint)'
	@echo  '  make PIP_INST=...    => to set/unset pip install options (default "--user")'


# ------------------------------------------------------------------------------
# requirements
# ------------------------------------------------------------------------------

PHONY += msg-pylint-exe pylint-exe

msg-python-exe:
	@echo "\n  $(PYTHON) is required\n\n\
  Make sure you have an $(PYTHON) installed, grab it from\n\
  https://www.python.org or install it from your package\n\
  manager. On debian based OS these requirements are\n\
  installed by::\n\n\
    sudo apt-get install $(PYTHON)\n" | $(FMT)

ifeq ($(shell which $(PYTHON) >/dev/null 2>&1; echo $$?), 1)
python-exe: msg-python-exe
	$(error The '$(PYTHON)' command was not found)
else
python-exe:
	@:
endif

msg-pylint-exe:
	@echo "\n  $(PYLINT) is required\n\n\
  Make sure you have an updated pylint installed, grab it from\n\
  https://www.pylint.org or install it from your package\n\
  manager. On debian based OS these requirements are\n\
  installed by::\n\n\
    sudo apt-get install pylint\n" | $(FMT)

ifeq ($(shell which $(PYLINT) >/dev/null 2>&1; echo $$?), 1)
pylint-exe: msg-pylint-exe
	$(error The '$(PYLINT)' command was not found)
else
pylint-exe:
	@:
endif

msg-pip-exe:
	@echo "\n  $(PIP) is required\n\n\
  Make sure you have an updated pip installed, grab it from\n\
  https://pip.pypa.io or install it from your package\n\
  manager. On debian based OS these requirements are\n\
  installed by::\n\n\
    sudo apt-get install python$(PY)-pip\n" | $(FMT)

ifeq ($(shell which $(PIP) >/dev/null 2>&1; echo $$?), 1)
pip-exe: msg-pip-exe
	$(error The '$(PIP)' command was not found)
else
pip-exe:
	@:
endif

# ------------------------------------------------------------------------------
# commands
# ------------------------------------------------------------------------------

# $2 path to folder with setup.py
quiet_cmd_pyinstall   = INSTALL   $@
      cmd_pyinstall   = $(PIP) install $(PIP_INST)  -e $2

# Uninstall the package. Since pip does not uninstall the no longer needed
# depencies (something like autoremove) the depencies remain.

# $2 package name to uninstall
quiet_cmd_pyuninstall = UNINSTALL $@
      cmd_pyuninstall = $(PIP) uninstall $2

# $2 path to lint
quiet_cmd_pylint      = LINT      $@
      cmd_pylint      = $(PYLINT) --rcfile utils/pylintrc $2

quiet_cmd_pytest      = TEST      $@
      cmd_pytest      = cd tests; $(PYTHON) run.py -I py35 -d -m '^[tT]est' $(TEST)

# setuptools, pip, easy_install its a mess full of cracks, a documentation hell
# and broken by design ... all sucks, I really, really hate all this ... aaargh!

# sdist: https://packaging.python.org/distributing/#source-distributions
# bdist_wheel: https://packaging.python.org/distributing/#pure-python-wheels
quiet_cmd_pybuild     = BUILD     $@
      cmd_pybuild     = $(PYTHON) setup.py \
			sdist -d $(PYDIST)  \
			bdist_wheel --bdist-dir $(PYBUILD) -d $(PYDIST)

quiet_cmd_pyclean     = CLEAN     $@
# remove 'build' folder since bdist_wheel does not care the --bdist-dir
      cmd_pyclean     = \
	rm -rf $(PYDIST) build *.egg-info          ;\
	find . -name '*.pyc' -exec rm -f {} +      ;\
	find . -name '*.pyo' -exec rm -f {} +      ;\
	find . -name __pycache__ -exec rm -rf {} +

# ------------------------------------------------------------------------------
# targets
# ------------------------------------------------------------------------------

PHONY += pybuild pyclean upload-pypi
pybuild: python-exe
	$(call cmd,pybuild)

PHONY += pytest
pytest: python-exe
	$(call cmd,pytest)

pyclean: python-exe
	$(call cmd,pyclean)

PHONY += pylint
pylint: pylint-exe
	$(call cmd,pylint,$(PYOBJECTS))

PHONY += pyinstall pyuninstall
pyinstall: pip-exe
	$(call cmd,pyinstall,.)
pyuninstall: pip-exe
	$(call cmd,pyuninstall,$(PYOBJECTS))


# With 'dependency_links=' setuptools supports dependencies on packages hosted
# on other reposetories then PyPi, see "Packages Not On PyPI" [1].  The big
# drawback is, due to security reasons (I don't know where the security gate on
# PyPi is), this feature is not supported by pip [2]. Thats why an upload to
# PyPi is required and since uploads via setuptools is not recommended, we have
# to imstall / use twine ... its really a mess.
#
# [1] http://python-packaging.readthedocs.io/en/latest/dependencies.html#packages-not-on-pypi
# [2] https://github.com/pypa/pip/pull/1519

# https://github.com/pypa/twine
upload-pypi: pyclean pybuild
	twine upload $(PYDIST)/*

.PHONY: $(PHONY)
